<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Java - 分类 - MeowRain Blog</title>
    <link>https://example.org/categories/java/</link>
    <description>Java - 分类 | MeowRain Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>meowrain@126.com (meowrain)</managingEditor>
      <webMaster>meowrain@126.com (meowrain)</webMaster><lastBuildDate>Thu, 23 May 2024 12:12:28 &#43;0800</lastBuildDate><atom:link href="https://example.org/categories/java/" rel="self" type="application/rss+xml" /><item>
  <title>JavaPO,BO,VO,DTO,POJO,DAO概念</title>
  <link>https://example.org/posts/31c8a8c/</link>
  <pubDate>Thu, 23 May 2024 12:12:28 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/31c8a8c/</guid>
  <description><![CDATA[Java PO,BO,VO,DTO,POJO,DAO概念 一篇文章讲清楚VO，BO，PO，DO，DTO的区别 - 知乎 (zhihu.com)
POJO (Plain Old Java Object) Java POJO (Plain Old Java Object) 是指一个最基本的、普通的Java对象。POJO通常具有以下特点:
只包含私有属性,没有public、protected的属性。属性通常用private修饰。 提供getter和setter方法来访问和修改属性。 不继承或实现任何特定的接口和类。 不包含任何注解。 不依赖外部jar包和类库。 除了基本的构造方法、getter/setter方法、equals/hashCode/toString方法之外,没有任何其他方法。 POJO主要用于表示简单的数据结构,其设计符合面向对象的基本原则,可以很方便地进行序列化和反序列化。在Java Web应用中,POJO常用来接收和传递数据,例如作为Model对象。Spring框架也大量采用POJO设计模式。所以简单来说,POJO就是一个最基本的Java类,没有复杂的依赖关系,用来表示简单的数据模型。
DTO（Data Transfer Object）数据传输对象 DTO是一个比较特殊的对象，他有两种存在形式：
在后端，他的存在形式是java对象，也就是在controller里面定义的那个东东，通常在后端不需要关心怎么从json转成java对象的，这个都是由一些成熟的框架帮你完成啦，比如spring框架
在前端，他的存在形式通常是js里面的对象（也可以简单理解成json），也就是通过ajax请求的那个数据体
这也是为什么把他画成横跨两层的原因
这里可能会遇到个问题，现在微服务盛行，服务和服务之间调用的传输对象能叫DTO吗？
我的理解是看情况
DTO本身的一个隐含的意义是要能够完整的表达一个业务模块的输出
如果服务和服务之间相对独立，那就可以叫DTO
如果服务和服务之间不独立，每个都不是一个完整的业务模块，拆开可能仅仅是因为计算复杂度或者性能的问题，那这就不能够叫做DTO，只能是BO
VO (View Object) VO就是展示用的数据，不管展示方式是网页，还是客户端，还是APP，只要是这个东西是让人看到的，这就叫VO
VO主要的存在形式就是js里面的对象（也可以简单理解成json）
VO和DTO的区别 PO(bean,entity等命名) Persisitant Object 持久对象，数据库表中的记录在java对象中的显示状态
一个PO的数据结构对应着库中表的结构，表中的一条记录就是一个PO对象
通常PO里面除了get，set之外没有别的方法
对于PO来说，数量是相对固定的，一定不会超过数据库表的数量
等同于Entity，这俩概念是一致的
BO（Business Object）业务对象
BO就是PO的组合
简单的例子比如说PO是一条交易记录，BO是一个人全部的交易记录集合对象
复杂点儿的例子PO1是交易记录，PO2是登录记录，PO3是商品浏览记录，PO4是添加购物车记录，PO5是搜索记录，BO是个人网站行为对象
BO是一个业务对象，一类业务就会对应一个BO，数量上没有限制，而且BO会有很多业务操作，也就是说除了get，set方法以外，BO会有很多针对自身数据进行计算的方法
为什么BO也画成横跨两层呢？原因是现在很多持久层框架自身就提供了数据组合的功能，因此BO有可能是在业务层由业务来拼装PO而成，也有可能是在数据库访问层由框架直接生成
很多情况下为了追求查询的效率，框架跳过PO直接生成BO的情况非常普遍，PO只是用来增删改使用
BO和DTO的区别 这两个的区别主要是就是字段的删减
BO对内，为了进行业务计算需要辅助数据，或者是一个业务有多个对外的接口，BO可能会含有很多接口对外所不需要的数据，因此DTO需要在BO的基础上，只要自己需要的数据，然后对外提供
在这个关系上，通常不会有数据内容的变化，内容变化要么在BO内部业务计算的时候完成，要么在解释VO的时候完成
DAO(Data Access Object) 数据访问对象 DAO(Data Access Object) 是数据访问对象的简称,是JavaWeb应用中用于封装对数据源的访问的组件。]]></description>
</item>
<item>
  <title>JDBC_韩顺平老师转载</title>
  <link>https://example.org/posts/2585519/</link>
  <pubDate>Sat, 18 May 2024 14:22:32 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/2585519/</guid>
  <description><![CDATA[第25章 JDBC 和数据库连接池 JDBC 概述 基本介绍 模拟JDBC JDBC 带来的好处 JDBC 快速入门 JDBC 程序编写步骤 JDBC 第一个程序 获取数据库连接5种方式 方式1 方式2 方式3 方式4 方式5 ResultSet[结果集] 基本介绍 应用实例 Statement 基本介绍 PreparedStatement 基本介绍 预处理好处 应用案例 JDBC 的相关 API 小结 封装JDBCUtils 说明 代码实现 事务 基本介绍 应用实例 批处理 基本介绍 数据库连接池 5k 次连接数据库问题 传统获取Connection 问题分析 数据库连接池种类 C3P0 应用实例 Druid(德鲁伊)应用实例 将JDBCUtils 工具类改成Druid(德鲁伊)实现 Apache—DBUtils 先分析一个问题 自定义方法解决 基本介绍 应用实例 表 和 JavaBean 的类型映射关系 DAO 和增删改查通用方法-BasicDao 先分析一个问题 基本说明 BasicDAO 应用实例 第25章 JDBC 和数据库连接池 JDBC 概述 基本介绍 JDBC为访问不同的数据库提供了统一的接口，为使用者屏蔽了细节问题。]]></description>
</item>
<item>
  <title>Java面向对象基础(高级)</title>
  <link>https://example.org/posts/0112cbb/</link>
  <pubDate>Sat, 18 May 2024 13:09:43 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/0112cbb/</guid>
  <description><![CDATA[Java面向对象(高级) 面型对象高级 面型对象中级 面型对象初级
类变量/类方法 类变量/类方法-博客园 类变量快速入门 介绍 类变量（又叫静态变量）是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。
定义类变量：访问修饰符 static 数据类型 变量名; 静态变量是类加载的时候，就创建了,所以我们没有创建对象实例 定义一个变量 count ,是一个类变量(静态变量) static 静态 该变量最大的特点就是会被Child 类的所有的对象实例共享
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package cn.meowrain.classVariable; public class var01 { public static void main(String[] args) { Child child01 = new Child(&#34;mike&#34;); Child child02 = new Child(&#34;john&#34;); child01.count++; child02.count++; System.out.println(&#34;共有&#34; + Child.count + &#34;个小朋友参加了游戏&#34;); } } class Child { private String name; public static int count = 0; public Child(String name){ this.]]></description>
</item>
<item>
  <title>Java面向对象基础(中级)</title>
  <link>https://example.org/posts/f4f8ed5/</link>
  <pubDate>Sat, 18 May 2024 13:09:20 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/f4f8ed5/</guid>
  <description><![CDATA[Java面向对象基础（中级） Consolas, &lsquo;Courier New&rsquo;, monospace
包 包的三大作用 1.区分相同名字的类
2.当类很多的时候，可以很好地管理类
3.控制访问范围
包的基本语法 1 2 1.package 关键字 2. com.xxxx 表示包名 包的本质分析 包的本质就是创建不同的文件夹和目录来保存类文件
包的命名 只能包含数字，下划线，小圆点，但不能用数字开头，也不能是关键字和保留字
命名规范：
com.xxxx.usr 用户模块
com.xxxx.utils 工具模块
域名反着写，最后加上模块名
常用的包 引入包 语法：import 包名.类名
案例：
1 2 3 4 5 6 7 8 9 10 11 package cn.meowrain.Object_.package_; import java.util.Scanner; public class package_01 { public static void main(String[] args) { Scanner sc = new Scanner(System.in); int a = sc.nextInt(); System.out.println(a); } } 访问修饰符 封装 封装介绍 封装就是把抽象出的数据[属性]和对数据的操作**[方法]封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作[方法]**，才能对数据进行操作]]></description>
</item>
<item>
  <title>Java面向对象基础(初级)</title>
  <link>https://example.org/posts/61c8cb0/</link>
  <pubDate>Sat, 18 May 2024 13:08:20 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/61c8cb0/</guid>
  <description><![CDATA[Java面向对象基础(初级) 对面向对象和面向过程的理解
谈谈你对面向过程和面向对象的理解_智十七°的博客-CSDN博客_面向对象和面向过程的理解
面向对象的三大特征 封装 (Encapsulation) 继承 (Inheritance) 多态 (Polymorphism)
初识对象和类 初次使用对象和类 如下，在下面这个代码中，我创建了一个猫类，然后利用猫类创建了两个猫对象，一个赋值给cat01，一个赋值给cat02
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package cn.meowrain.Object_; public class relean_01 { public static void main(String[] args) { //创建两猫对象 Cat cat01 = new Cat(); cat01.name = &#34;小花&#34;; cat01.age = 1; cat01.color = &#34;花色&#34;; Cat cat02 = new Cat(); cat02.]]></description>
</item>
</channel>
</rss>
