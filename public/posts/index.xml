<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - MeowRain Blog</title>
    <link>https://example.org/posts/</link>
    <description>所有文章 | MeowRain Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>meowrain@126.com (meowrain)</managingEditor>
      <webMaster>meowrain@126.com (meowrain)</webMaster><lastBuildDate>Sun, 26 May 2024 20:41:07 &#43;0800</lastBuildDate><atom:link href="https://example.org/posts/" rel="self" type="application/rss+xml" /><item>
  <title>计算机网络基础知识</title>
  <link>https://example.org/posts/297df01/</link>
  <pubDate>Sun, 26 May 2024 20:41:07 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/297df01/</guid>
  <description><![CDATA[网络模型 OSI七层网络模型 应用层 表示层 会话层 传输层 网络层 数据链路层 物理层 各层传输的数据单元(Protocol Data Unit) https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%AE%AE%E6%95%B0%E6%8D%AE%E5%8D%95%E5%85%83 物理层: 比特流(bit) 数据链路层: 数据帧(frame) 网络层: 数据包(packet) 传输层: 数据段(segment)--&gt;TCP 数据报(datagram) --&gt; UDP 应用层: 报文(message)
TCP/IP网络模型 应用层 传输层 网络层 网络接口层 IP IP 在 TCP/IP 参考模型中处于第三层，也就是网络层。
网络层的主要作用是：实现主机与主机之间的通信，也叫点对点（end to end）通信。
IP 地址的基础知识 IP 地址（IPv4 地址）由 32 位正整数来表示，IP 地址在计算机是以二进制的方式处理的。 人类为了方便记忆采用了点分十进制的标记方式，也就是将 32 位 IP 地址以每 8 位为组，共分为 4 组，每组以「.」隔开，再将每组转换成十进制。 IP地址分类 A类: 0.0.0.0 ~ 127.255.255.255 B类: 128.0.0.0 ~ 191.255.255.255 C类: 192.0.0.0 ~ 223.255.255.255
A类就是32位里面，第1位是0，后面7位是网络号，剩下的都是主机号(24位) B类就是32位里面，前2位是10，后面14位为网络号，剩下都是主机号(16位) C类就是32位里面，前3位是110，后面21位为网络号，剩下都是主机号(8位)]]></description>
</item>
<item>
  <title>Java Spring笔记06 Bean的实例化模式 Spring</title>
  <link>https://example.org/posts/6607266/</link>
  <pubDate>Thu, 23 May 2024 12:17:13 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/6607266/</guid>
  <description><![CDATA[Bean的实例化模式 Spring为Bean提供了多种实例化方式，通常包括4种方式。（也就是说在Spring中为Bean对象的创建准备了多种方案，目的是：更加灵活）
● 第一种：通过构造方法实例化 ● 第二种：通过简单工厂模式实例化 ● 第三种：通过factory-bean实例化 ● 第四种：通过FactoryBean接口实例化
通过构造方法实例化 1 2 3 4 5 6 7 8 ConstructorBean.java package com.powercode.spring6.beans; public class ConstructorBean { public ConstructorBean(){ } } 1 2 3 4 5 6 &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;beans xmlns=&#34;http://www.springframework.org/schema/beans&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemaLocation=&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;&gt; &lt;bean id=&#34;constructorBean&#34; class=&#34;com.powercode.spring6.beans.ConstructorBean&#34;&gt;&lt;/bean&gt; &lt;/beans&gt; 1 2 3 4 5 6 7 8 9 测试程序` @Test public void testConstrucotrBean(){ Logger logger = LoggerFactory.getLogger(FirstSpringTest.class); ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&#34;spring9.]]></description>
</item>
<item>
  <title>Java Spring笔记05 工厂模式 设计模式</title>
  <link>https://example.org/posts/b5d8f62/</link>
  <pubDate>Thu, 23 May 2024 12:16:38 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/b5d8f62/</guid>
  <description><![CDATA[工厂模式的三种形态 工厂模式通常有三种形态：
● 第一种：简单工厂模式（Simple Factory）：不属于23种设计模式之一。简单工厂模式又叫做：静态 工厂方法模式。简单工厂模式是工厂方法模式的一种特殊实现。
● 第二种：工厂方法模式（Factory Method）：是23种设计模式之一。
● 第三种：抽象工厂模式（Abstract Factory）：是23种设计模式之一。
简单工厂模式 简单工厂模式的角色包括三个：
● 抽象产品 角色
● 具体产品 角色
● 工厂类 角色
抽象产品角色：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package com.powernode.factory; /** * 武器（抽象产品角色） * @author 动力节点 * @version 1.0 * @className Weapon * @since 1.0 **/ public abstract class Weapon { /** * 所有的武器都有攻击行为 */ public abstract void attack(); } 具体产品角色：]]></description>
</item>
<item>
  <title>Java Spring笔记04 Spring引入外部属性配置文件</title>
  <link>https://example.org/posts/102939e/</link>
  <pubDate>Thu, 23 May 2024 12:15:03 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/102939e/</guid>
  <description><![CDATA[Spring引入外部属性配置文件 我们都知道编写数据源的时候是需要连接数据库的信息的，例如：driver url username password等信息。这些信息可以单独写到一个属性配置文件中吗，这样用户修改起来会更加的方便。当然可以。
第一步：写一个数据源类，提供相关属性。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 MyDataSource.]]></description>
</item>
<item>
  <title>Java Spring笔记03 Spring三种命名空间</title>
  <link>https://example.org/posts/bb23c8c/</link>
  <pubDate>Thu, 23 May 2024 12:14:31 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/bb23c8c/</guid>
  <description><![CDATA[p命名空间注入 目的：简化配置。 使用p命名空间注入的前提条件包括两个：
● 第一：在XML头部信息中添加p命名空间的配置信息：xmlns:p=&ldquo;http://www.springframework.org/schema/p"
● 第二：p命名空间注入是基于setter方法的，所以需要对应的属性提供setter方法。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Customer.java package com.powercode.spring6.beans; public class Customer { private String name; private int age; public void setName(String name) { this.name = name; } public void setAge(int age){ this.age = age; } @Override public String toString() { return &#34;Customer{&#34; + &#34;name=&#39;&#34; + name + &#39;\&#39;&#39; + &#34;, age=&#34; + age + &#39;}&#39;; } } 1 2 3 4 5 6 7 8 spring3.]]></description>
</item>
<item>
  <title>Java Spring笔记02 Spring自动装配</title>
  <link>https://example.org/posts/84be7f4/</link>
  <pubDate>Thu, 23 May 2024 12:14:02 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/84be7f4/</guid>
  <description><![CDATA[基于的XML自动装配 根据名称自动装配 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 UserDao.java package com.powercode.spring6.dao; import org.slf4j.Logger; import org.slf4j.LoggerFactory; /* * Bean * * */ public class UserDao { private static final Logger logger = LoggerFactory.getLogger(UserDao.class); public void insert() { //用log4j2日志框架 logger.info(&#34;数据库正在插入用户信息&#34;); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 UserService.]]></description>
</item>
<item>
  <title>Java Spring笔记01 Set注入</title>
  <link>https://example.org/posts/410ddaa/</link>
  <pubDate>Thu, 23 May 2024 12:13:07 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/410ddaa/</guid>
  <description><![CDATA[maven配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;project xmlns=&#34;http://maven.apache.org/POM/4.0.0&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemaLocation=&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;spring_first&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;name&gt;Spring Snapshots&lt;/name&gt; &lt;url&gt;https://repo.]]></description>
</item>
<item>
  <title>JavaPO,BO,VO,DTO,POJO,DAO概念</title>
  <link>https://example.org/posts/31c8a8c/</link>
  <pubDate>Thu, 23 May 2024 12:12:28 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/31c8a8c/</guid>
  <description><![CDATA[Java PO,BO,VO,DTO,POJO,DAO概念 一篇文章讲清楚VO，BO，PO，DO，DTO的区别 - 知乎 (zhihu.com)
POJO (Plain Old Java Object) Java POJO (Plain Old Java Object) 是指一个最基本的、普通的Java对象。POJO通常具有以下特点:
只包含私有属性,没有public、protected的属性。属性通常用private修饰。 提供getter和setter方法来访问和修改属性。 不继承或实现任何特定的接口和类。 不包含任何注解。 不依赖外部jar包和类库。 除了基本的构造方法、getter/setter方法、equals/hashCode/toString方法之外,没有任何其他方法。 POJO主要用于表示简单的数据结构,其设计符合面向对象的基本原则,可以很方便地进行序列化和反序列化。在Java Web应用中,POJO常用来接收和传递数据,例如作为Model对象。Spring框架也大量采用POJO设计模式。所以简单来说,POJO就是一个最基本的Java类,没有复杂的依赖关系,用来表示简单的数据模型。
DTO（Data Transfer Object）数据传输对象 DTO是一个比较特殊的对象，他有两种存在形式：
在后端，他的存在形式是java对象，也就是在controller里面定义的那个东东，通常在后端不需要关心怎么从json转成java对象的，这个都是由一些成熟的框架帮你完成啦，比如spring框架
在前端，他的存在形式通常是js里面的对象（也可以简单理解成json），也就是通过ajax请求的那个数据体
这也是为什么把他画成横跨两层的原因
这里可能会遇到个问题，现在微服务盛行，服务和服务之间调用的传输对象能叫DTO吗？
我的理解是看情况
DTO本身的一个隐含的意义是要能够完整的表达一个业务模块的输出
如果服务和服务之间相对独立，那就可以叫DTO
如果服务和服务之间不独立，每个都不是一个完整的业务模块，拆开可能仅仅是因为计算复杂度或者性能的问题，那这就不能够叫做DTO，只能是BO
VO (View Object) VO就是展示用的数据，不管展示方式是网页，还是客户端，还是APP，只要是这个东西是让人看到的，这就叫VO
VO主要的存在形式就是js里面的对象（也可以简单理解成json）
VO和DTO的区别 PO(bean,entity等命名) Persisitant Object 持久对象，数据库表中的记录在java对象中的显示状态
一个PO的数据结构对应着库中表的结构，表中的一条记录就是一个PO对象
通常PO里面除了get，set之外没有别的方法
对于PO来说，数量是相对固定的，一定不会超过数据库表的数量
等同于Entity，这俩概念是一致的
BO（Business Object）业务对象
BO就是PO的组合
简单的例子比如说PO是一条交易记录，BO是一个人全部的交易记录集合对象
复杂点儿的例子PO1是交易记录，PO2是登录记录，PO3是商品浏览记录，PO4是添加购物车记录，PO5是搜索记录，BO是个人网站行为对象
BO是一个业务对象，一类业务就会对应一个BO，数量上没有限制，而且BO会有很多业务操作，也就是说除了get，set方法以外，BO会有很多针对自身数据进行计算的方法
为什么BO也画成横跨两层呢？原因是现在很多持久层框架自身就提供了数据组合的功能，因此BO有可能是在业务层由业务来拼装PO而成，也有可能是在数据库访问层由框架直接生成
很多情况下为了追求查询的效率，框架跳过PO直接生成BO的情况非常普遍，PO只是用来增删改使用
BO和DTO的区别 这两个的区别主要是就是字段的删减
BO对内，为了进行业务计算需要辅助数据，或者是一个业务有多个对外的接口，BO可能会含有很多接口对外所不需要的数据，因此DTO需要在BO的基础上，只要自己需要的数据，然后对外提供
在这个关系上，通常不会有数据内容的变化，内容变化要么在BO内部业务计算的时候完成，要么在解释VO的时候完成
DAO(Data Access Object) 数据访问对象 DAO(Data Access Object) 是数据访问对象的简称,是JavaWeb应用中用于封装对数据源的访问的组件。]]></description>
</item>
<item>
  <title>Java网络编程 Socket套接字</title>
  <link>https://example.org/posts/45570b6/</link>
  <pubDate>Thu, 23 May 2024 12:10:41 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/45570b6/</guid>
  <description><![CDATA[Socket Socket有两种编程方式
tcp编程 udp编程 Java Socket建立连接 Server.java
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import java.io.IOException; import java.net.ServerSocket; import java.net.Socket; public class Server { public static void main(String[] args) { try { ServerSocket server = new ServerSocket(8080); // 8080 is the port number System.out.println(&#34;Server is running... waiting for client to connect&#34;); Socket socket = server.accept();// wait for client to connect System.]]></description>
</item>
<item>
  <title>Java网络编程 TCP网络通信编程文件传输</title>
  <link>https://example.org/posts/d76e347/</link>
  <pubDate>Thu, 23 May 2024 12:09:41 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/d76e347/</guid>
  <description><![CDATA[TCP网络通信编程-文件传输 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package org.example.socket; import java.io.*; import java.net.ServerSocket; import java.net.Socket; public class TcpServerCopy { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(8888); System.out.println(&#34;等待客户端连接...&#34;); Socket socket = serverSocket.accept(); System.out.println(&#34;客户端连接成功&#34;); /* 读入文件 */ File file = new File(&#34;src/org/example/111658775_p0.]]></description>
</item>
</channel>
</rss>
