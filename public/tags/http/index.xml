<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Http - 标签 - MeowRain Blog</title>
    <link>https://example.org/tags/http/</link>
    <description>Http - 标签 | MeowRain Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>meowrain@126.com (meowrain)</managingEditor>
      <webMaster>meowrain@126.com (meowrain)</webMaster><lastBuildDate>Sun, 23 Jun 2024 13:24:19 &#43;0800</lastBuildDate><atom:link href="https://example.org/tags/http/" rel="self" type="application/rss+xml" /><item>
  <title>Golang实现文件断点续传</title>
  <link>https://example.org/posts/c66c786/</link>
  <pubDate>Sun, 23 Jun 2024 13:24:19 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/c66c786/</guid>
  <description><![CDATA[Golang实现文件断点续传 HTTP 范围请求 https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Range_requests
https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range
https://juejin.cn/post/7381455296658751551?searchId=202406222022394BE0D5BA1F1DB137CFF5
https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206
我们首先用golang写一个不具备范围请求的代码
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 package main import ( &#34;mime&#34; &#34;net/http&#34; &#34;os&#34; &#34;path/filepath&#34; &#34;strconv&#34; &#34;github.]]></description>
</item>
<item>
  <title>Go net/http库</title>
  <link>https://example.org/posts/51b9f8d/</link>
  <pubDate>Wed, 19 Jun 2024 10:43:47 &#43;0000</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/51b9f8d/</guid>
  <description><![CDATA[Go net/http库 Get()方法 函数原型 1 func Get(url string) (resp *Response, err error) 使用示例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import ( &#34;fmt&#34; &#34;io&#34; &#34;log&#34; &#34;net/http&#34; ) func main() { response, err := http.Get(&#34;http://httpbin.org/get&#34;) if err != nil { log.Fatal(err) } fmt.]]></description>
</item>
<item>
  <title>HTTP状态码</title>
  <link>https://example.org/posts/098d7b4/</link>
  <pubDate>Wed, 15 May 2024 19:24:44 &#43;0800</pubDate>
  <author>meowrain</author>
  <guid>https://example.org/posts/098d7b4/</guid>
  <description><![CDATA[1xx 状态码 API 不需要1xx状态码，下面介绍其他四类状态码的精确含义。
2xx 状态码 200状态码表示操作成功，但是不同的方法可以返回更精确的状态码。
GET: 200 OK POST: 201 Created PUT: 200 OK PATCH: 200 OK DELETE: 204 No Content 上面代码中，POST返回201状态码，表示生成了新的资源；DELETE返回204状态码，表示资源已经不存在。
3xx 状态码 API 用不到301状态码（永久重定向）和302状态码（暂时重定向，307也是这个含义），因为它们可以由应用级别返回，浏览器会直接跳转，API 级别可以不考虑这两种情况。
API 主要是用303 See Other，表示参考另一个 URL。它与302和307的含义一样，也是”暂时重定向”，区别在于302和307用于GET请求，而303用于POST、PUT和DELETE请求。收到303以后，浏览器不会自动跳转，而会让用户自己决定下一步怎么办。下面是一个例子。
HTTP/1.1 303 See Other Location: /api/orders/12345
4xx 状态码 4xx 状态码表示客户端错误，主要有下面几种：
400 Bad Request：服务器不理解客户端的请求，未做任何处理。 401 Unauthorized：用户未提供身份验证凭据，或者没有通过身份验证。 403 Forbidden：用户通过了身份验证，但是不具有访问资源所需的权限。 404 Not Found：所请求的资源不存在，或不可用。 405 Method Not Allowed：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。 410 Gone：所请求的资源已从这个地址转移，不再可用。 415 Unsupported Media Type：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。 422 Unprocessable Entity ：客户端上传的附件无法处理，导致请求失败。 429 Too Many Requests：客户端的请求次数超过限额。]]></description>
</item>
</channel>
</rss>
